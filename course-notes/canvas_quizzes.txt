Quiz 1:
1. What is the worst case time complexity of insertion sort?
Answer: O(n^2)
Explanation: When a list is almost sorted, the time complexity is improved to O(n). At worst it will take two nested for loops.

2. What is the auxiliary (additional) space complexity of insertion sort?
Answer: O(1)
Explanation: We do not require any additional space beyond constant space for insertion sort.

3. For an input size of n=10^7, Which time complexity is impractical?
Answer: O(2^n)
Explanation: 2^n will grow quickest at very large values of n.


Quiz 2:
1. For a 10by1000 (i.e. int[10][1000]) 2D array, what is the difference in space overhead between a row major representation and an array-of-arrays representation?*, * Assuming 32-bit pointers
Answer: 36 bytes
Explanation: Row major is always 8 bit. There are 10 rows. The formula for array-of-arrays is (4*(rows+1) - row major) = (4*11)-8 = 36

2. What is the asymptotic time complexity of the given functions for a stack, implemented on an array with the right end as the top of the stack?
Answer: top  O(1), push O(1), pop O(1)
Explanation: All functions of stack and queue are O(1)

3. What does the following code do on a linked list? ('head' points to the head of the linked list)
      node* prev = NULL;
      node* current = head;
      node* next;
      while (current != NULL)
      {
      next = current->next; 
      current->next = prev; 
      prev = current;
      current = next;
      }
      head = prev;
Answer: Reverse a Linked List
Explanation: 
  
  
Quiz 3:
1. What does the following pseudocode function do?
      func(Queue Q)
      {
          Stack S;
          while (!Q.isEmpty())
          {
          S.push(Q.pop());
          }
          while (!S.isEmpty())
          {
          Q.push(S.pop());
          }
      }
Answer: Reverses the Queue
Explanation:

2. Given a hash table that uses %b (b = 13) hash function and linear open addressing for overflow handling, insert the following numbers: 2 , 3 , 15 , 29 , 5 , 16 -- What is the index of 16 in the resulting hash table? (Indexes start from 0)
Answer: 7
Explanation: 

3. In a stock market scenario, we need to keep track of thousands of changes to the values of different companies per second. Every one minute, the company whose value had the largest change should be displayed. Every one hour, we need to announce the top 3 companies in terms of market value. Which of the following data structures suits the needs of this application best?
Answer: Hash Table
Explanation: We will keep track of company names as keys and then extract data when needed.


Quiz 4:
1. Select all that apply:
Answer: There is only one path from root to any leaf of a tree, a tree has no cycle, any node in a binary tree can have up to two children

2. In a full binary tree, represented as an array (1-indexed), what is the index of node 26's grandparent?
Answer: 6
Explanation: Index = (Node Number) / 2 for each parent. Since we want grandparent, we want to divide by 2 twice.

3. Which of the following combinations should be available to construct a unique binary tree?
Answer: Preorder and Inorder
Explanation: 

4. What does the following code do?
      func(binaryTreeNode p, binaryTreeNode q)
      {
          if(p==null && q==null)
          {
              return true;
          }
          else if(p==null || q==null)
          {  
              return false;
          }
          else
          {
              return (p.val == q.val &&
                      func(p.left,q.left) &&
                      func(p.right,q.right));
          }
      }
Answer: Check if Two Trees are Identical 
Explanation:
